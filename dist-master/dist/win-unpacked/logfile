Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49805
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '48c8f0aa-3322-48fc-8995-9085c4dc43a4' }
Connection Error: Error: write after end
Websockt Connection Closed
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49688
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '45ad60f8-38b8-4603-b15a-c2c32d692c58' }
User email:  master
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master}}
sendLinkFrameByMaster master
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  23  bytes:  [255 127 2 130 17 1 32 109 97 115 116 101 114 10 2 32 115 108 97 118 101 10 255]
got link frame after ring:   master
 slave

client:   master  clientInfo:  [ master]
client:   slave  clientInfo:  [ slave]
state:  map[1:master 2:slave]
before mutex
 mutex.lock
send state frame
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  23  bytes:  [255 127 1 134 17 1 32 109 97 115 116 101 114 10 2 32 115 108 97 118 101 10 255]
got state frame after ring:   master
 slave

now master = slave
inside listen for
Connection Error: Error: write after end
Websockt Connection Closed
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  148  bytes:  [255 1 2 129 142 123 34 105 100 34 58 34 49 53 53 56 56 54 51 51 57 51 52 50 48 56 52 48 46 52 50 50 50 55 48 54 49 49 51 53 54 53 109 97 115 116 101 114 34 44 34 97 117 116 104 111 114 34 58 34 115 108 97 118 101 34 44 34 114 101 115 112 111 110 100 101 114 34 58 34 109 97 115 116 101 114 34 44 34 109 101 115 115 97 103 101 34 58 34 106 34 44 34 100 97 116 101 34 58 49 53 53 56 56 54 51 51 57 51 52 50 48 44 34 99 104 101 99 107 101 100 83 117 98 69 118 101 110 116 34 58 102 97 108 115 101 125 255]
Data:  {"id":"1558863393420840.4222706113565master","author":"slave","responder":"master","message":"j","date":1558863393420,"checkedSubEvent":false}
INFO_FRAME
send message event to interface {0xc000031870 {1558863393420840.4222706113565master slave master j 1558863393420 false}}
before mutex
 mutex.lock
inside listen for
mesage event {0xc000031870 {1558863393420840.4222706113565master slave master j 1558863393420 false}}
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49714
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '31d83240-8a41-4dde-a784-31689efc4b86' }
User email:  master
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master}}
sendLinkFrameByMaster master
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  31  bytes:  [255 127 2 130 25 1 32 109 97 115 116 101 114 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got link frame after ring:   master
 slave@mail.ru

client:   master  clientInfo:  [ master]
client:   slave@mail.ru  clientInfo:  [ slave@mail.ru]
state:  map[2:slave@mail.ru 1:master]
before mutex
 mutex.lock
inside listen for
send state frame
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  31  bytes:  [255 127 1 134 25 1 32 109 97 115 116 101 114 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got state frame after ring:   master
 slave@mail.ru

now master = slave
inside listen for
Connection Error: Error: write after end
Websockt Connection Closed
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49720
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '52d1e7eb-e72c-4324-8247-f93387cc21e8' }
User email:  kmkk
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {kmkk}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {kmkk}}
sendLinkFrameByMaster kmkk
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  21  bytes:  [255 127 2 130 15 1 32 107 109 107 107 10 2 32 121 121 121 121 121 10 255]
got link frame after ring:   kmkk
 yyyyy

client:   kmkk  clientInfo:  [ kmkk]
client:   yyyyy  clientInfo:  [ yyyyy]
state:  map[1:kmkk 2:yyyyy]
before mutex
 mutex.lock
inside listen for
send state frame
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  21  bytes:  [255 127 1 134 15 1 32 107 109 107 107 10 2 32 121 121 121 121 121 10 255]
got state frame after ring:   kmkk
 yyyyy

now master = slave
inside listen for
Connection Error: Error: write after end
Websockt Connection Closed
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49727
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: 'e2a2a30d-39be-4f4a-a8c5-5b8593ff2fbb' }
User email:  master
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master}}
sendLinkFrameByMaster master
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  23  bytes:  [255 127 2 130 17 1 32 109 97 115 116 101 114 10 2 32 115 108 97 118 101 10 255]
got link frame after ring:   master
 slave

client:   master  clientInfo:  [ master]
client:   slave  clientInfo:  [ slave]
state:  map[1:master 2:slave]
before mutex
 mutex.lock
inside listen for
send state frame
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  23  bytes:  [255 127 1 134 17 1 32 109 97 115 116 101 114 10 2 32 115 108 97 118 101 10 255]
got state frame after ring:   master
 slave

now master = slave
inside listen for
Connection Error: Error: write after end
Websockt Connection Closed
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49733
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '9fb84135-34c0-4698-a727-739b806da698' }
Connection Error: Error: write after end
Websockt Connection Closed
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49738
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '9171b0b8-0a20-41c4-9d75-50a5fde7c06d' }
Connection Error: Error: write after end
Websockt Connection Closed
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49746
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: 'b597ba38-cf9f-4985-9291-5c50e697d416' }
Connection Error: Error: write after end
Websockt Connection Closed
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49761
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: 'b7cad6a6-7737-4b09-9820-5ce60cbfa07c' }
Connection Error: Error: write after end
Websockt Connection Closed
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49769
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: 'e1a76fb0-ad62-4674-93a8-8bf5e75a1f4f' }
Connection Error: Error: write after end
Websockt Connection Closed
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49776
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '5d87e299-68cf-4ce1-939b-c242341d731a' }
User email:  master@mail.ru
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master@mail.ru}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master@mail.ru}}
sendLinkFrameByMaster master@mail.ru
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 2 130 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got link frame after ring:   master@mail.ru
 slave@mail.ru

client:   master@mail.ru  clientInfo:  [ master@mail.ru]
client:   slave@mail.ru  clientInfo:  [ slave@mail.ru]
state:  map[1:master@mail.ru 2:slave@mail.ru]
before mutex
 mutex.lock
send state frame
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 1 134 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got state frame after ring:   master@mail.ru
 slave@mail.ru

now master = slave
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  174  bytes:  [255 1 2 129 168 123 34 105 100 34 58 34 49 53 53 56 56 55 50 48 52 52 48 55 51 56 56 54 46 54 55 49 51 55 56 55 53 54 50 54 48 51 109 97 115 116 101 114 64 109 97 105 108 46 114 117 34 44 34 97 117 116 104 111 114 34 58 34 115 108 97 118 101 64 109 97 105 108 46 114 117 34 44 34 114 101 115 112 111 110 100 101 114 34 58 34 109 97 115 116 101 114 64 109 97 105 108 46 114 117 34 44 34 109 101 115 115 97 103 101 34 58 34 107 101 107 34 44 34 100 97 116 101 34 58 49 53 53 56 56 55 50 48 52 52 48 55 51 44 34 99 104 101 99 107 101 100 83 117 98 69 118 101 110 116 34 58 102 97 108 115 101 125 255]
Data:  {"id":"1558872044073886.6713787562603master@mail.ru","author":"slave@mail.ru","responder":"master@mail.ru","message":"kek","date":1558872044073,"checkedSubEvent":false}
INFO_FRAME
send message event to interface {0xc000031780 {1558872044073886.6713787562603master@mail.ru slave@mail.ru master@mail.ru kek 1558872044073 false}}
before mutex
 mutex.lock
inside listen for
mesage event {0xc000031780 {1558872044073886.6713787562603master@mail.ru slave@mail.ru master@mail.ru kek 1558872044073 false}}
Letter message:  kek
before mutex
 mutex.lock
inside listen for
inside listen for
Data:  
ACK_FRAME
inside listen for
Letter message:  kek
before mutex
 mutex.lock
inside listen for
inside listen for
inside listen for
Data:  
ACK_FRAME
inside listen for
Letter message:  kek123123123123123121
before mutex
 mutex.lock
inside listen for
Data:  
ACK_FRAME
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  190  bytes:  [255 1 2 129 184 123 34 105 100 34 58 34 49 53 53 56 56 55 50 48 53 55 57 54 48 53 52 56 46 52 52 56 57 48 52 54 56 56 55 48 53 53 115 108 97 118 101 64 109 97 105 108 46 114 117 34 44 34 97 117 116 104 111 114 34 58 34 115 108 97 118 101 64 109 97 105 108 46 114 117 34 44 34 114 101 115 112 111 110 100 101 114 34 58 34 109 97 115 116 101 114 64 109 97 105 108 46 114 117 34 44 34 109 101 115 115 97 103 101 34 58 34 107 101 107 49 50 51 49 50 51 49 50 51 49 50 51 49 50 51 49 50 49 34 44 34 100 97 116 101 34 58 49 53 53 56 56 55 50 48 53 55 57 54 48 44 34 99 104 101 99 107 101 100 83 117 98 69 118 101 110 116 34 58 116 114 117 101 125 255]
Data:  {"id":"1558872057960548.4489046887055slave@mail.ru","author":"slave@mail.ru","responder":"master@mail.ru","message":"kek123123123123123121","date":1558872057960,"checkedSubEvent":true}
INFO_FRAME
send message event to interface {0xc0000319b0 {1558872057960548.4489046887055slave@mail.ru slave@mail.ru master@mail.ru kek123123123123123121 1558872057960 true}}
before mutex
 mutex.lock
inside listen for
mesage event {0xc0000319b0 {1558872057960548.4489046887055slave@mail.ru slave@mail.ru master@mail.ru kek123123123123123121 1558872057960 true}}
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  190  bytes:  [255 1 2 129 184 123 34 105 100 34 58 34 49 53 53 56 56 55 50 48 53 55 57 54 48 53 52 56 46 52 52 56 57 48 52 54 56 56 55 48 53 53 115 108 97 118 101 64 109 97 105 108 46 114 117 34 44 34 97 117 116 104 111 114 34 58 34 115 108 97 118 101 64 109 97 105 108 46 114 117 34 44 34 114 101 115 112 111 110 100 101 114 34 58 34 109 97 115 116 101 114 64 109 97 105 108 46 114 117 34 44 34 109 101 115 115 97 103 101 34 58 34 107 101 107 49 50 51 49 50 51 49 50 51 49 50 51 49 50 51 49 50 49 34 44 34 100 97 116 101 34 58 49 53 53 56 56 55 50 48 53 55 57 54 48 44 34 99 104 101 99 107 101 100 83 117 98 69 118 101 110 116 34 58 116 114 117 101 125 255]
Data:  {"id":"1558872057960548.4489046887055slave@mail.ru","author":"slave@mail.ru","responder":"master@mail.ru","message":"kek123123123123123121","date":1558872057960,"checkedSubEvent":true}
INFO_FRAME
send message event to interface {0xc000031a10 {1558872057960548.4489046887055slave@mail.ru slave@mail.ru master@mail.ru kek123123123123123121 1558872057960 true}}
before mutex
 mutex.lock
inside listen for
mesage event {0xc000031a10 {1558872057960548.4489046887055slave@mail.ru slave@mail.ru master@mail.ru kek123123123123123121 1558872057960 true}}
Letter message:  kek
before mutex
 mutex.lock
inside listen for
Data:  
ACK_FRAME
inside listen for
Letter message:  kek
before mutex
 mutex.lock
inside listen for
Data:  
ACK_FRAME
inside listen for
Letter message:  kek
before mutex
 mutex.lock
inside listen for
inside listen for
inside listen for
Data:  
ACK_FRAME
inside listen for
Letter message:  kek
before mutex
 mutex.lock
inside listen for
inside listen for
inside listen for
Data:  
ACK_FRAME
inside listen for
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
Connection Error: Error: write after end
 mutex.lock
BOY
TERMINATE
Websockt Connection Closed
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
inside listen for
Data:  
UPLINK_FRAME
inside listen for
Program starts MASTER
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49783
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '80b471a3-72b9-4800-9846-8bce1f159831' }
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
Connection Error: Error: write after end
Websockt Connection Closed
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49796
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '049abcf5-a0bf-4786-a68f-f698f7b0dd7c' }
User email:  master@mail.ru
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master@mail.ru}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master@mail.ru}}
sendLinkFrameByMaster master@mail.ru
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 2 130 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got link frame after ring:   master@mail.ru
 slave@mail.ru

client:   master@mail.ru  clientInfo:  [ master@mail.ru]
client:   slave@mail.ru  clientInfo:  [ slave@mail.ru]
state:  map[1:master@mail.ru 2:slave@mail.ru]
before mutex
 mutex.lock
inside listen for
send state frame
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 1 134 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got state frame after ring:   master@mail.ru
 slave@mail.ru

now master = slave
Letter message:  
before mutex
 mutex.lock
Connection Error: Error: read ECONNRESET
Websockt Connection Closed
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49802
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: 'a8a3a571-9553-4c5b-8554-b0e1326bc1bd' }
User email:  master@mail.ru
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master@mail.ru}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master@mail.ru}}
sendLinkFrameByMaster master@mail.ru
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
Connection Error: Error: write after end
inside listen for
inside listen for
Websockt Connection Closed
got link frame after ring:  
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49807
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '818f4502-f717-4715-88b9-d3dd417142c4' }
User email:  master@mail.ru
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master@mail.ru}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master@mail.ru}}
sendLinkFrameByMaster master@mail.ru
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
before mutex
 mutex.lock
BOY
TERMINATE
Connection Error: Error: write after end
before mutex
Websockt Connection Closed
 mutex.lock
inside listen for
inside listen for
got link frame after ring:  
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49812
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '33a7a868-227c-4547-bfd5-9a440e86eaf3' }
User email:  master@mail.ru
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master@mail.ru}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master@mail.ru}}
sendLinkFrameByMaster master@mail.ru
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 2 130 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got link frame after ring:   master@mail.ru
 slave@mail.ru

client:   master@mail.ru  clientInfo:  [ master@mail.ru]
client:   slave@mail.ru  clientInfo:  [ slave@mail.ru]
state:  map[1:master@mail.ru 2:slave@mail.ru]
before mutex
 mutex.lock
inside listen for
send state frame
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 1 134 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got state frame after ring:   master@mail.ru
 slave@mail.ru

now master = slave
Letter message:  priv
before mutex
 mutex.lock
Connection Error: Error: read ECONNRESET
Websockt Connection Closed
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49819
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '582a24d4-7a78-497f-9fbd-6b2eee30c148' }
User email:  master@mail.ru
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master@mail.ru}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master@mail.ru}}
sendLinkFrameByMaster master@mail.ru
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 2 130 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got link frame after ring:   master@mail.ru
 slave@mail.ru

client:   master@mail.ru  clientInfo:  [ master@mail.ru]
client:   slave@mail.ru  clientInfo:  [ slave@mail.ru]
state:  map[1:master@mail.ru 2:slave@mail.ru]
before mutex
 mutex.lock
inside listen for
send state frame
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 1 134 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got state frame after ring:   master@mail.ru
 slave@mail.ru

now master = slave
Letter message:  privet
before mutex
 mutex.lock
Connection Error: Error: read ECONNRESET
Websockt Connection Closed
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49824
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '44484358-1263-400e-8ab6-fb8fe1b860a3' }
User email:  master@mail.ru
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master@mail.ru}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master@mail.ru}}
sendLinkFrameByMaster master@mail.ru
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 2 130 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got link frame after ring:   master@mail.ru
 slave@mail.ru

client:   master@mail.ru  clientInfo:  [ master@mail.ru]
client:   slave@mail.ru  clientInfo:  [ slave@mail.ru]
state:  map[1:master@mail.ru 2:slave@mail.ru]
before mutex
 mutex.lock
inside listen for
send state frame
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 1 134 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got state frame after ring:   master@mail.ru
 slave@mail.ru

now master = slave
inside listen for
Letter message:  llkl
before mutex
 mutex.lock
Connection Error: Error: read ECONNRESET
Websockt Connection Closed
Found port: COM1
Found port: COM2
try to open backport
try to open frontport
chans made
interface made

Main.js
49829
WebSocket Client Connected
Received message:
{ Event: 'devTools',
  Data: '',
  ID: '7481d439-2676-4974-943b-90f32f4500fb' }
User email:  master@mail.ru
got event from chan  SET_USER_GOTRON_EVENT {SET_USER_GOTRON_EVENT {master@mail.ru}}
cast email
OK:  true userCasted:  {SET_USER_GOTRON_EVENT {master@mail.ru}}
sendLinkFrameByMaster master@mail.ru
1
2
3
4
before mutex
 mutex.lock
send link frame
frameparser made
start listening
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 2 130 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got link frame after ring:   master@mail.ru
 slave@mail.ru

client:   master@mail.ru  clientInfo:  [ master@mail.ru]
client:   slave@mail.ru  clientInfo:  [ slave@mail.ru]
state:  map[1:master@mail.ru 2:slave@mail.ru]
before mutex
 mutex.lock
send state frame
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
inside listen for
len:  39  bytes:  [255 127 1 134 33 1 32 109 97 115 116 101 114 64 109 97 105 108 46 114 117 10 2 32 115 108 97 118 101 64 109 97 105 108 46 114 117 10 255]
got state frame after ring:   master@mail.ru
 slave@mail.ru

now master = slave
inside listen for
Letter message:  wtf
before mutex
 mutex.lock
Connection Error: Error: read ECONNRESET
Websockt Connection Closed
